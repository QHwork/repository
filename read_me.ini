
### all_initial: unit transformation
## here wigner--- au
## Ekc au
## mas amu
## Bl  10^i(-12)m

## 1 m = 10^(-10) ang
## 1 amu = 1822 au
## 1 au = 21.87 ang/fs
## 1 au = 0.529 ang
## Gaussian input file ang



#### We wanna make this version the simplest one, no other complicated funcational part ####

#### get initial reactants optimized structures (key word of Gaussian : freq=hpmode nosymm)
#### prepare sample
#### use Wigner sampling program: ini_sampling

step1 
change the context of input.ini

step2
python2 prepare.py

step3
python2 sampling.py

step4
python2 manyjob_lixs.py

#### put 2 reactants coordinates and velocities into 1 file
#### always remember --- check the unit (ang or au)
python3 merge.py







#### prepare NBO and CFF calculation results (Gaussian Multiwfn)
give out active reaction regions of the 2 reactants
(region/region_label/Ekc)








#### since got regions, collision energy range must be set; E unit au
#### this version use stationary 0.5fs time step; 100fs time length; 7 ang distance; Gaussian unit ang ####

#### sample starting points
## we sample the center points of reaction region on the spheric surface first
step1
python3 sphere.py
## 20000--5000--700
step2
python3 velocity_verlet.py
python3 pick5000.py
python3 pick700.py
## rotate reactant2 and move them to surface for different orientations, move reactant1 to center
step3
python3 sphere2.py









#### Start BOMD
##  cd workspace_merge  ##
(input.inp gauss_tmp/model.gjf gauss_tmp/gmodel.gjf bat_sub_single.sh qsub_run2_single.pbs) 
bash bat_sub_single.sh (qsub_run2_single.pbs)

#### analysis trajectories 
##  workspce_merge/ ##
# (num_sum constant.py get_matrix_react.sh matrix_reaction.py get_optjob.py)
bash get_matrix_react.sh
python3 get_optjob.py

#### optimize
## mkdir opt 
## opt/ ##
# (move_for_opt.py job.sh)
cp ../workspace_merge/for_run ../workspace_merge/for_route .
python3 move_for_opt.py
bash job.sh

#### analysis optimized structures
## opt/ ##
# (num_sum g_log.py getTS.py normal.py dis_normal.py)
python3 g_log.py
python3 getTS.py
python3 normal.py
python3 dis_normal.py

#### find TS
## opt/ ##
# (constant.py job.sh move_TSopt.sh move_TSopt.py)
bash move_TSopt.sh

## opt/TS_/ ##
# (num_sum job.sh disTS.py coor_all.sh)
bash job.sh
bash coor_all.sh



